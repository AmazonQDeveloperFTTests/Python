# -*- coding: utf-8 -*-
"""PCA_Code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lzFebVtljdyiu1hHlRfE4mpxITUmH8bV

### **1. Installing Packages**
"""

!pip install -U scikit-learn

"""### **2. Importing Necessary Modules**"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.datasets import load_digits

"""### **3. Loading the datatset**"""

# Load the Digits dataset
digits = load_digits()
X = digits.data
y = digits.target

"""### **4. Applying PCA and reducing the image**"""

# Randomly select an image for demonstration
random_image_index = np.random.randint(0, X.shape[0])

# Define the number of principal components you want to keep
n_components = int(input("Enter the number of components you want to keep (in the range of 0 to 64): "))

# Apply PCA to the image data
pca = PCA(n_components=n_components)
X_pca = pca.fit_transform(X)

# Inverse transform to get the reduced-dimension image
X_inverse = pca.inverse_transform(X_pca)

"""### **5. Displaying the reduced image**"""

# Original image
original_image = X[random_image_index].reshape(8, 8)

# Reduced-dimension image
reduced_image = X_inverse[random_image_index].reshape(8, 8)

# Plot the original and reduced images
plt.figure(figsize=(8, 4))
plt.subplot(1, 2, 1)
plt.imshow(original_image, cmap='gray')
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(reduced_image, cmap='gray')
plt.title(f'Reduced to {n_components} Components')
plt.axis('off')

plt.show()
