[tool.pytest.ini_options]
markers = [
    "mat_ops: mark a test as utilizing matrix operations.",
]
addopts = [
    "--durations=10",
    "--doctest-modules",
    "--showlocals",
]

[tool.coverage.report]
omit = [".env/*"]
sort = "Cover"

[tool.codespell]
ignore-words-list = "3rt,ans,crate,damon,fo,followings,hist,iff,kwanza,mater,secant,som,sur,tim,zar"
skip = "./.*,*.json,ciphers/prehistoric_men.txt,project_euler/problem_022/p022_names.txt,pyproject.toml,strings/dictionary.txt,strings/words.txt"

[tool.ruff]
ignore = [      # `ruff rule S101` for a description of that rule
    "B904",     # B904: Within an `except` clause, raise exceptions with `raise ... from err`
    "B905",     # B905: `zip()` without an explicit `strict=` parameter
    "E741",     # E741: Ambiguous variable name 'l'
    "G004",     # G004 Logging statement uses f-string
    "N999",     # N999: Invalid module name
    "PLC1901",  # PLC1901: `{}` can be simplified to `{}` as an empty string is falsey
    "PLR2004",  # PLR2004: Magic value used in comparison
    "PLR5501",  # PLR5501: Consider using `elif` instead of `else`
    "PLW0120",  # PLW0120: `else` clause on loop without a `break` statement
    "PLW060",   # PLW060: Using global for `{name}` but no assignment is done -- DO NOT FIX
    "PLW2901",  # PLW2901: Redefined loop variable
    "RUF00",    # RUF00: Ambiguous unicode character -- DO NOT FIX
    "RUF100",   # RUF100: Unused `noqa` directive
    "S101",     # S101: Use of `assert` detected -- DO NOT FIX
    "S105",     # S105: Possible hardcoded password: 'password'
    "S113",     # S113: Probable use of requests call without timeout
    "S311",     # S311: Standard pseudo-random generators are not suitable for cryptographic purposes
    "UP038",    # UP038: Use `X | Y` in `{}` call instead of `(X, Y)` -- DO NOT FIX
]
select = [      # https://beta.ruff.rs/docs/rules
  # "COM",  # flake8-commas
  # "DJ",  # flake8-django
  # "ERA",  # eradicate
  # "NPY",  # NumPy-specific rules
  # "PD",  # pandas-vet
  # "PLR091",  # Pylint Refactor just for max-args, max-branches, etc.
  # "Q",  # flake8-quotes
  # "T20",  # flake8-print
  "A",    # flake8-builtins
  "ANN",  # flake8-annotations
  "ARG",  # flake8-unused-arguments
  "ASYNC",  # flake8-async
  "B",    # flake8-bugbear
  "BLE",  # flake8-blind-except
  "C4",   # flake8-comprehensions
  "C90",  # McCabe cyclomatic complexity
  "D",    # pydocstyle
  "DTZ",  # flake8-datetimez
  "E",    # pycodestyle
  "EM",   # flake8-errmsg
  "EXE",  # flake8-executable
  "F",    # Pyflakes
  "FA",   # flake8-future-annotations
  "FBT",  # flake8-boolean-trap
  "FLY",  # flynt
  "G",    # flake8-logging-format
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "INP",  # flake8-no-pep420
  "INT",  # flake8-gettext
  "ISC",  # flake8-implicit-str-concat
  "N",    # pep8-naming
  "PGH",  # pygrep-hooks
  "PIE",  # flake8-pie
  "PL",   # Pylint
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "PYI",  # flake8-pyi
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # Ruff-specific rules
  "S",    # flake8-bandit
  "SIM",  # flake8-simplify
  "SLF",  # flake8-self
  "T10",  # flake8-debugger
  "TCH",  # flake8-type-checking
  "TD",   # flake8-todos
  "TID",  # flake8-tidy-imports
  "TRY",  # tryceratops
  "UP",   # pyupgrade
  "W",    # pycodestyle
  "YTT",  # flake8-2020
]
show-source = true
target-version = "py311"

[tool.ruff.mccabe]   # DO NOT INCREASE THIS VALUE
max-complexity = 17  # default: 10

[tool.ruff.pylint]   # DO NOT INCREASE THESE VALUES
max-args = 10        # default: 5
max-branches = 20    # default: 12
max-returns = 8      # default: 6
max-statements = 88  # default: 50
