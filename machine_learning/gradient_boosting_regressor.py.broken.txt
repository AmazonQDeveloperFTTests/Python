"""Boston veri setini kullanarak sklearn'de GradientBoostingRegressor'un
   uygulanması. Bu veri seti, ev fiyatlarını tahmin etmek için çok popüler
   bir regresyon problemidir.
"""

import matplotlib.pyplot as plt
import pandas as pd
from sklearn.datasets import load_boston
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split


def main():

    # sklearn'den veri setini yükleme
    boston = load_boston()
    print(boston.keys())
    # şimdi bir veri çerçevesi oluşturalım
    df_boston = pd.DataFrame(boston.data, columns=boston.feature_names)
    # hedef değişkeni veri çerçevesine ekleyelim
    df_boston["Fiyat"] = boston.target
    # head fonksiyonunu kullanarak ilk beş satırı yazdır
    print(df_boston.head())
    # Özet istatistikler
    print(df_boston.describe().T)
    # Özellik seçimi

    x = df_boston.iloc[:, :-1]
    y = df_boston.iloc[:, -1]  # hedef değişken
    # veriyi %75 eğitim ve %25 test setlerine ayır
    x_train, x_test, y_train, y_test = train_test_split(
        x, y, random_state=0, test_size=0.25
    )

    model = GradientBoostingRegressor(
        n_estimators=500, max_depth=5, min_samples_split=4, learning_rate=0.01
    )
    # modeli eğitme
    model.fit(x_train, y_train)
    # modelin veriye ne kadar iyi uyduğunu görmek için
    egitim_skoru = model.score(x_train, y_train).round(3)
    test_skoru = model.score(x_test, y_test).round(3)
    print("GradientBoosting'in Eğitim Skoru :", egitim_skoru)
    print("GradientBoosting'in Test Skoru :", test_skoru)
    # Modeli hataları bularak değerlendirelim
    y_pred = model.predict(x_test)

    # Ortalama kare hatası
    print(f"Ortalama kare hatası: {mean_squared_error(y_test, y_pred):.2f}")
    # Açıklanan varyans skoru: 1 mükemmel tahmin
    print(f"Test Varyans Skoru: {r2_score(y_test, y_pred):.2f}")

    # Şimdi modeli test verilerine karşı çalıştıralım
    fig, ax = plt.subplots()
    ax.scatter(y_test, y_pred, edgecolors=(0, 0, 0))
    ax.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], "k--", lw=4)
    ax.set_xlabel("Gerçek")
    ax.set_ylabel("Tahmin Edilen")
    ax.set_title("Gerçek vs Tahmin Edilen")
    # bu show fonksiyonu grafiği gösterecek
    plt.show()


if __name__ == "__main__":
    main()
