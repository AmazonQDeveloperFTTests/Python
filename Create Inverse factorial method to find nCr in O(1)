# of nCr in O(1) time.
N = 1000001

# array to store inverse of 1 to N
factorial_num_inverse = [None] * (N + 1)

# array to precompute inverse of 1! to N!
natural_num_inverse = [None] * (N + 1)

# array to store factorial of
# first N numbers
fact = [None] * (N + 1)

# Function to precompute inverse of numbers
def InverseofNumber(p):
natural_num_inverse[0] = natural_num_inverse[1] = 1
for i in range(2, N + 1, 1):
natural_num_inverse[i] = (natural_num_inverse[p % i] *
(p - int(p / i)) % p)

# Function to precompute inverse
# of factorials
def Inverse_of_factorial(p):
factorial_num_inverse[0] = factorial_num_inverse[1] = 1

# precompute inverse of natural numbers
for i in range(2, N + 1, 1):
factorial_num_inverse[i] = (natural_num_inverse[i] *
factorial_num_inverse[i - 1]) % p

# Function to calculate factorial of 1 to N
def factorial(p):
fact[0] = 1

# precompute factorials
for i in range(1, N + 1):
fact[i] = (fact[i - 1] * i) % p

# Function to return nCr % p in O(1) time
def Binomial(N, R, p):

# n C r = n!*inverse(r!)*inverse((n-r)!)
ans = ((fact[N] * factorial_num_inverse[R])% p *
factorial_num_inverse[N - R])% p
return ans

# Driver Code
if _name_ == '_main_':

# Calling functions to precompute the
# required arrays which will be required
# to answer every query in O(1)
p = 1000000007
Inverse_of_number(p)
Inverse_of_factorial(p)
factorial(p)

# 1st query
N = 15
R = 4
print(Binomial(N, R, p))

# 2nd query
N = 20
R = 3
print(Binomial(N, R, p))

# This code is contributed by
# Surendra_Gangwar
# A Python3 program that answers
# queries from nCr in O(1) time.
N = 1000001

# Array to store the reciprocal of 1 to N
factorial_num_inverse = [None] * (N + 1)

# Array to precalculate the reciprocal of 1!
natural_num_inverse = [None] * (N + 1)

# Array to store factorials
# First N numbers
fact = [None] * (N + 1)

# Predict the inverse of a number Function
def Inverse_of_number( p):
natural_num_inverse[0] = natural_num_inverse[1] = 1
for i in range(2, N + 1, 1):
natural_num_inverse[i] = (natural_num_inverse[p % i] *
(p - int( p / i)) % p)

# function to predict the inverse
# factorial number
def Inverse_of_factorial(p):
factorial_num_inverse[0] = factorial_num_inverse[1] = 1

# natural numbers
for i in range(2, N + 1, 1):
factorial_num_inverse[i] = (natural_num_inverse[i] *
factorial_num_inverse[i - 1]) % p

# from 1 to N Function to compute factorial
def factorial(p) :
fact[0] = 1

# Precompute factorial of i in range(1, N + 1)
:
fact[i] = (fact [i - 1] * i) % p

# Expected return e Function nCr % p in O(1) time
def Binomial(N, R, p):

# n C r = n!*inverse(r !)*inverse((n-r)!)
ans = (( fact[N] * factorial_num_inverse[R])% p *
factorial_num_inverse[N - R])% p
return ans 4 444
# driver code
if _name_ == '_main_':

# call a function to predict
# required arrays required
# to answer all queries in O(1)
p = 1000000007
Inverse_of_number( p)
Inverse_of_factorial(p)
Factorial(p)

# First query
N = 15
R = 4
print(Binomial (N, R, p))

# 2. Query
N = 20
R = 3
print(Binomial(N, R, p))

# This code is returned by
# Provided by Surendra_Gangwar
# A Python3 program that answers
# queries from nCr in O(1) time.
N = 1000001

# Array to store the reciprocal of 1 to N
factorial_num_inverse = [None] * (N + 1)

# Array to precalculate the reciprocal of 1!
natural_num_inverse = [None] * (N + 1)

# Array to store factorials
# First N numbers
fact = [None] * (N + 1)

# Predict the inverse of a number Function
def Inverse_of_number( p):
natural_num_inverse[0] = natural_num_inverse[1] = 1
for i in range(2, N + 1, 1):
natural_num_inverse[i] = (natural_num_inverse[p % i] *
(p - int( p / i)) % p)

# function to predict the inverse
# factorial number
def Inverse_of_factorial(p):
factorial_num_inverse[0] = factorial_num_inverse[1] = 1

# natural numbers
for i in range(2, N + 1, 1):
factorial_num_inverse[i] = (natural_num_inverse[i] *
factorial_num_inverse[i - 1]) % p

# from 1 to N Function to compute factorial
def factorial(p) :
fact[0] = 1

# Precompute factorial of i in range(1, N + 1)
:
fact[i] = (fact [i - 1] * i) % p

# Expected return e Function nCr % p in O(1) time
def Binomial(N, R, p):

# n C r = n!*inverse(r !)*inverse((n-r)!)
ans = (( fact[N] * factorial_num_inverse[R])% p *
factorial_num_inverse[N - R])% p
return ans 4 444
# driver code
if _name_ == '_main_':

# call a function to predict
# required arrays required
# to answer all queries in O(1)
p = 1000000007
Inverse_of_number( p)
Inverse_of_factorial(p)
Factorial(p)

# First query
N = 15
R = 4
print(Binomial (N, R, p))

# 2. Query
N = 20
R = 3
print(Binomial(N, R, p))
