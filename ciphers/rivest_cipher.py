"""
The Rivest Cipher, commonly known as RC4, is a symmetric key stream cipher algorithm. It was designed by Ron Rivest in 1987. RC4 is known for its simplicity and speed, making it widely used in various applications, including secure sockets layer (SSL) for web security.

RC4 operates by generating a pseudorandom stream of bits (keystream) based on an initial secret key. This keystream is then XORed with the plaintext to produce the ciphertext. The algorithm can be summarized as follows:

Key Scheduling: RC4 generates a permutation of all 256 possible bytes (from 0 to 255) based on the secret key. This permutation is stored in an array, which is typically called 'S' or the state array.

Stream Generation: After key scheduling, RC4 generates a keystream by using the state array. The keystream is generated by performing a series of swaps and XOR operations.

Encryption: The generated keystream is XORed with the plaintext to produce the ciphertext. To decrypt the ciphertext, the same keystream is XORed with the ciphertext.

RC4 is relatively easy to implement and efficient, but it has some security vulnerabilities when used incorrectly. It's essential to use RC4 with a strong initialization vector (IV) and to avoid key reuse to mitigate these vulnerabilities.

While RC4 was widely used in the past, it is no longer recommended for secure communications due to discovered vulnerabilities and weaknesses. More modern ciphers, such as Advanced Encryption Standard (AES), are preferred for secure data encryption.

You can run this code to perform RC4 encryption and decryption. Remember to replace the "key" and "plaintext" variables with your own values as needed.
"""


import sys

def initialize_s_box(key):
    s_box = list(range(256))
    j = 0
    for i in range(256):
        j = (j + s_box[i] + key[i % len(key)]) % 256
        s_box[i], s_box[j] = s_box[j], s_box[i]
    return s_box

def generate_keystream(s_box, message_length):
    i = 0
    j = 0
    keystream = []
    for _ in range(message_length):
        i = (i + 1) % 256
        j = (j + s_box[i]) % 256
        s_box[i], s_box[j] = s_box[j], s_box[i]
        k = s_box[(s_box[i] + s_box[j]) % 256]
        keystream.append(k)
    return keystream

def rc4_encrypt(message, key):
    s_box = initialize_s_box(key)
    keystream = generate_keystream(s_box, len(message))
    encrypted_message = []
    for i in range(len(message)):
        encrypted_char = ord(message[i]) ^ keystream[i]
        encrypted_message.append(encrypted_char)
    return bytes(encrypted_message)

def rc4_decrypt(encrypted_message, key):
    return rc4_encrypt(encrypted_message, key)  # RC4 decryption is the same as encryption

def main():
    key = b"SecretKey"  # Replace with your secret key
    plaintext = "Hello, RC4!"  # Replace with your message

    encrypted = rc4_encrypt(plaintext, key)
    decrypted = rc4_decrypt(encrypted, key)

    print("Original message:", plaintext)
    print("Encrypted message:", encrypted)
    print("Decrypted message:", decrypted.decode("utf-8"))

if __name__ == "__main__":
    main()
